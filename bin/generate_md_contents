#!/usr/bin/env python
#coding=UTF-8

'''
生成mardown文档的目录，对文档格式的要求如下：

1. 首行为 # title
2. 目录为 ## subTitle

自动生成subTitle的目录附加到title的下一行
'''

import sys
import shutil
import os
import getopt 

reload(sys) 
sys.setdefaultencoding( "utf-8" )

contents_template = '* [%s](#%s)\n'
tag_anchor_template = "## <a name='%s'></a>%s\n"
contents_title = u'\n## 目录\n\n'

def usage():
    print "usage: generate_md_contents [-a] doc_name [to_doc_name]"

def main():
    opts,args = getopt.getopt(sys.argv[1:],'ah',[])

    anchorFlag = False
    for option, value in opts: 
        if option == "-a":
            anchorFlag = True
        elif option == "-h":
            usage()
            sys.exit(0)

    argc = len(args)
    if argc < 1:
        print "Invalid argument count."
        sys.exit(1) 

    fname = args[0]
    targetFname = args[1] if argc >= 2 else None

    print '-'*10 + 'start process %s' % fname + '_'*10

    new_lines = []

    tags = []   

    contents = []

    i = 0
    with open(fname) as f:
        lines = f.readlines()
        for line in lines:
            if i == 0 :
                contents.append(line) #添加首行title
            elif line.startswith(contents_title):
                    print 'the file already have contents, exit...'
                    sys.exit(0)
            else:
                if line.startswith('## '):
                    tag = line[3:-1] #去除结尾换行符 
                    tags.append(tag)
                    
                    line = tag_anchor_template % (tag,tag) if anchorFlag else line #生成tag描点
                new_lines.append(line)
            i = i + 1

    contents += [contents_title]

    for t in tags:
        contents.append(contents_template % (t,t))

    new_lines = contents + new_lines

    bak_file = None

    if targetFname == None: #覆盖原文件需要先备份
        targetFname = fname 
        # 备份原文件
        bak_file =  fname + '.bak'   
        shutil.copyfile(fname,bak_file)

    try:
        with open(targetFname, "w") as f:
            f.writelines(new_lines)
    except IOError as err: 
        print("update file error:" + str(err)) #str()将对象转换为字符串
        if bak_file != None and os.path.exists(bak_file):
            shutil.copyfile(bak_file,fname)

    if bak_file != None and os.path.exists(bak_file):
        os.remove(bak_file)

    print '-'*10 + 'end process %s' % fname + '_'*10

if __name__ == "__main__":
    main()